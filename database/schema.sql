USE cod;

CREATE TABLE IF NOT EXISTS crypto_transaction
(
    id                BIGINT AUTO_INCREMENT PRIMARY KEY,
    date_utc          TIMESTAMP            NOT NULL,
    pair              VARCHAR(255)         NOT NULL,
    side              ENUM ('BUY', 'SELL') NOT NULL,
    price             DECIMAL(20, 10)      NOT NULL,
    executed_amount   DECIMAL(20, 10),
    executed_currency VARCHAR(10),
    amount_amount     DECIMAL(20, 10),
    amount_currency   VARCHAR(10),
    fee_amount        DECIMAL(20, 10),
    fee_currency      VARCHAR(10)
);

ALTER TABLE crypto_transaction
    ADD CONSTRAINT unique_transaction UNIQUE (date_utc, pair, side, price, executed_amount, executed_currency,
                                              amount_amount, amount_currency, fee_amount, fee_currency);

CREATE TABLE IF NOT EXISTS BATCH_JOB_INSTANCE
(
    JOB_INSTANCE_ID BIGINT       NOT NULL PRIMARY KEY AUTO_INCREMENT,
    VERSION         BIGINT,
    JOB_NAME        VARCHAR(100) NOT NULL,
    JOB_KEY         VARCHAR(32)  NOT NULL,
    UNIQUE (JOB_NAME, JOB_KEY)
);

CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION
(
    JOB_EXECUTION_ID BIGINT    NOT NULL PRIMARY KEY AUTO_INCREMENT,
    VERSION          BIGINT,
    JOB_INSTANCE_ID  BIGINT    NOT NULL,
    CREATE_TIME      TIMESTAMP NOT NULL,
    START_TIME       TIMESTAMP DEFAULT NULL,
    END_TIME         TIMESTAMP DEFAULT NULL,
    STATUS           VARCHAR(10),
    EXIT_CODE        VARCHAR(2500),
    EXIT_MESSAGE     VARCHAR(2500),
    LAST_UPDATED     TIMESTAMP,
    FOREIGN KEY (JOB_INSTANCE_ID) REFERENCES BATCH_JOB_INSTANCE (JOB_INSTANCE_ID)
);

CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION_PARAMS
(
    JOB_EXECUTION_ID BIGINT       NOT NULL,
    PARAMETER_NAME   VARCHAR(100) NOT NULL,
    PARAMETER_TYPE   VARCHAR(100) NOT NULL,
    PARAMETER_VALUE  VARCHAR(2500),
    IDENTIFYING      CHAR(1)      NOT NULL,
    FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES BATCH_JOB_EXECUTION (JOB_EXECUTION_ID)
);

CREATE TABLE IF NOT EXISTS BATCH_STEP_EXECUTION
(
    STEP_EXECUTION_ID  BIGINT       NOT NULL PRIMARY KEY AUTO_INCREMENT,
    VERSION            BIGINT       NOT NULL,
    STEP_NAME          VARCHAR(100) NOT NULL,
    JOB_EXECUTION_ID   BIGINT       NOT NULL,
    CREATE_TIME        TIMESTAMP    NOT NULL,
    START_TIME         TIMESTAMP DEFAULT NULL,
    END_TIME           TIMESTAMP DEFAULT NULL,
    STATUS             VARCHAR(10),
    COMMIT_COUNT       BIGINT,
    READ_COUNT         BIGINT,
    FILTER_COUNT       BIGINT,
    WRITE_COUNT        BIGINT,
    READ_SKIP_COUNT    BIGINT,
    WRITE_SKIP_COUNT   BIGINT,
    PROCESS_SKIP_COUNT BIGINT,
    ROLLBACK_COUNT     BIGINT,
    EXIT_CODE          VARCHAR(2500),
    EXIT_MESSAGE       VARCHAR(2500),
    LAST_UPDATED       TIMESTAMP,
    FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES BATCH_JOB_EXECUTION (JOB_EXECUTION_ID)
);

CREATE TABLE IF NOT EXISTS BATCH_STEP_EXECUTION_CONTEXT
(
    STEP_EXECUTION_ID  BIGINT        NOT NULL PRIMARY KEY,
    SHORT_CONTEXT      VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT,
    FOREIGN KEY (STEP_EXECUTION_ID) REFERENCES BATCH_STEP_EXECUTION (STEP_EXECUTION_ID)
);

CREATE TABLE IF NOT EXISTS BATCH_JOB_EXECUTION_CONTEXT
(
    JOB_EXECUTION_ID   BIGINT        NOT NULL PRIMARY KEY,
    SHORT_CONTEXT      VARCHAR(2500) NOT NULL,
    SERIALIZED_CONTEXT TEXT,
    FOREIGN KEY (JOB_EXECUTION_ID) REFERENCES BATCH_JOB_EXECUTION (JOB_EXECUTION_ID)
);

-- ====================
-- Grant Permissions
-- ====================

-- Grant full privileges (read/write) to writer_user
GRANT ALL PRIVILEGES ON cod.crypto_transaction TO 'writer_user'@'%';
GRANT ALL PRIVILEGES ON cod.BATCH_JOB_INSTANCE TO 'writer_user'@'%';
GRANT ALL PRIVILEGES ON cod.BATCH_JOB_EXECUTION TO 'writer_user'@'%';
GRANT ALL PRIVILEGES ON cod.BATCH_JOB_EXECUTION_PARAMS TO 'writer_user'@'%';
GRANT ALL PRIVILEGES ON cod.BATCH_STEP_EXECUTION TO 'writer_user'@'%';
GRANT ALL PRIVILEGES ON cod.BATCH_STEP_EXECUTION_CONTEXT TO 'writer_user'@'%';
GRANT ALL PRIVILEGES ON cod.BATCH_JOB_EXECUTION_CONTEXT TO 'writer_user'@'%';

-- Grant read-only (SELECT) permissions to reader_user
GRANT SELECT ON cod.crypto_transaction TO 'reader_user'@'%';
GRANT SELECT ON cod.BATCH_JOB_INSTANCE TO 'reader_user'@'%';
GRANT SELECT ON cod.BATCH_JOB_EXECUTION TO 'reader_user'@'%';
GRANT SELECT ON cod.BATCH_JOB_EXECUTION_PARAMS TO 'reader_user'@'%';
GRANT SELECT ON cod.BATCH_STEP_EXECUTION TO 'reader_user'@'%';
GRANT SELECT ON cod.BATCH_STEP_EXECUTION_CONTEXT TO 'reader_user'@'%';
GRANT SELECT ON cod.BATCH_JOB_EXECUTION_CONTEXT TO 'reader_user'@'%';

-- Apply privileges
FLUSH PRIVILEGES;